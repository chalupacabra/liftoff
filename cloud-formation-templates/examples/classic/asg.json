{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Starter Auto Scaling Group",

  "Parameters": {
    "AppName": {
      "Type": "String",
      "Description": "Name of app to deploy."
    },
    "Role": {
      "Type": "String",
      "Default": "example",
      "Description": "Chef role to apply to instances."
    },
    "MaximumInstances": {
      "Type": "String",
      "Description": "Maximum number of app instances.",
      "Default": "1"
    },
    "MinimumInstances": {
      "Type": "String",
      "Description": "Minimum number of app instances.",
      "Default": "1"
    },
    "Abort": {
      "Description": "Should the entire deployment be aborted if bootstraping fails?",
      "Type": "String",
      "Default": "yes",
      "AllowedValues": [ "yes", "no" ],
      "ConstraintDescription": "yes or no"
    },
    "AppArtifactURL": {
      "Type": "String",
      "Description": "S3 URL to the app artifact"
    },
    "ChefRepoURL": {
      "Type": "String",
      "Description": "S3 URL to the chef repo artifact"
    },
    "EnvironmentSecret" : {
      "Description" : "Databag encryption secret for given environment.",
      "Type" : "String",
      "NoEcho": "true"
    },
    "AppSecret" : {
      "Description" : "Secret used for encrypting App stored in S3 by Heirloom.",
      "Type" : "String",
      "NoEcho": "true"
    },
    "ChefRepoSecret" : {
      "Description" : "Secret used for encrypting Chef Repo stored in S3 by Heirloom.",
      "Type" : "String",
      "NoEcho": "true"
    },
    "Environment": {
      "Type": "String",
      "Description": "The environment for this stack.",
      "Default": "development",
      "AllowedValues": [ "production", "development" ],
      "ConstraintDescription": "production or development"
    },
    "KeyName" : {
      "Description" : "Key pair name for instance",
      "Default": "control",
      "Type" : "String"
    },
    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "m1.medium",
      "AllowedValues" : [ "m1.small","m1.medium","m1.large","m1.xlarge",
                          "m2.xlarge", "m2.2xlarge", "m2.4xlarge",
                          "c1.medium", "c1.xlarge" ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    }
  },

  "Mappings": {
    "BootstrapSettingMap": {
      "abort": { "yes": "$?", "no": "0" }
    },

    "RegionMap" : {
      "us-east-1" : { "AMI" : "ami-1624987f" },
      "us-west-1" : { "AMI" : "ami-1bf9de5e" },
      "us-west-2" : { "AMI" : "ami-2a31bf1a" }
    }
  },

  "Resources": {

    "RootRole": {
       "Type": "AWS::IAM::Role",
       "Properties": {
          "AssumeRolePolicyDocument": {
             "Statement": [ {
                "Effect": "Allow",
                "Principal": {
                   "Service": [ "ec2.amazonaws.com" ]
                },
                "Action": [ "sts:AssumeRole" ]
             } ]
          },
          "Path": "/"
       }
    },

    "RolePolicies": {
       "Type": "AWS::IAM::Policy",
       "Properties": {
          "PolicyName": "root",
          "PolicyDocument": {
            "Statement":[
              {
                "Effect": "Allow",
                "Action": "cloudformation:DescribeStackResource",
                "Resource": "*"
              }
            ] 
          },
          "Roles": [ { "Ref": "RootRole" } ]
       }
    },

    "RootInstanceProfile": {
       "Type": "AWS::IAM::InstanceProfile",
       "Properties": {
          "Path": "/",
          "Roles": [ { "Ref": "RootRole" } ]
       }
    },

    "S3User": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "s3_access",
            "PolicyDocument": { 
              "Statement":[
                {
                  "Effect": "Allow",
                  "Action": [ "s3:Get*", "s3:List*" ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },

    "S3UserKey": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": {"Ref": "S3User"}
      }
    },

    "Instances": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": { "Fn::GetAZs": "" },
        "LaunchConfigurationName": { "Ref": "InstanceLaunchConfig" },
        "MaxSize": { "Ref": "MaximumInstances" },
        "MinSize": { "Ref": "MinimumInstances" },
        "Tags": [ {
          "Key": "Name",
          "Value": { "Ref": "AWS::StackName" } ,
          "PropagateAtLaunch": "true" }
        ]
      }
    },

    "InstanceLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "app_artifact_url": { "Ref": "AppArtifactURL" },
        "app_environment": { "Ref": "Environment" },
        "app_environment_secret": { "Ref": "EnvironmentSecret" },
        "app_secret": { "Ref": "AppSecret" },
        "chef_repo_url": { "Ref": "ChefRepoURL" },
        "region": { "Ref": "AWS::Region" },
        "role": { "Ref": "Role" },
        "stack_name": { "Ref": "AWS::StackName" },

        "AWS::CloudFormation::Init": {
          "configSets" : {
            "bootstrap" : [ "1", "2", "3" ]
          },

          "1" : {
            "commands": {
              "1_enable_epel" : {
                "command" : "yum-config-manager --enable epel"
              }
            }
          },

          "2" : {
            "files": {

              "/etc/intu_metadata.d/instance_role": {
                "content": { "Fn::Join": [ "", [ "ROLE=", { "Ref": "Role" }, "\n"] ] },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },

              "/etc/intu_metadata.d/chef_repo_secret": {
                "content": { "Fn::Join": [ "", [ "CHEF_REPO_SECRET=", { "Ref": "ChefRepoSecret" }, "\n"] ] },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },

              "/etc/intu_metadata.d/stack": {
                "content": { "Fn::Join": [ "", [ "NAME=", { "Ref": "AWS::StackName" }, "\n",
                                                 "REGION=", { "Ref": "AWS::Region" }, "\n",
                                                 "RESOURCE_NAME=InstanceLaunchConfig", "\n",
                                                 { "Fn::Join": [ "", [ "APP_ARTIFACTS_BUCKET=", { "Ref": "AppName" }, "-", { "Ref": "AWS::Region" } ]]}, "\n"
                           ]]},
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },

              "/root/.s3cfg": {
                "content": { "Fn::Join": ["", [
                  "access_key = ", { "Ref": "S3UserKey" }, "\n",
                  "secret_key = ", {"Fn::GetAtt": ["S3UserKey", "SecretAccessKey"]}, "\n"
                ]]},
                "mode"   : "000400",
                "owner"  : "root",
                "group"  : "root"
              }

            },

            "packages": {
              "yum" : {
                "s3cmd" : {}
              }
            },

            "commands": {
              "1_create_chef_dir" : {
                "command" : "mkdir -p -m 0700 /var/chef"
              },
              "2_install_chef" : {
                "command" : "curl -L https://www.opscode.com/chef/install.sh | bash /dev/stdin -v 10.20.0"
              },
              "3_download_chef_repo" : {
                "command" : { "Fn::Join": [ "", [ "s3cmd get ", { "Ref": "ChefRepoURL" }, " /var/tmp/chef_repo.tar.gz.gpg" ] ] },
                "env"     : { "HOME" : "/root" }
              },
              "4_decrypt_chef_repo" : {
                "command" : { "Fn::Join": [ "", [ "gpg --batch --yes --cipher-algo AES256 --passphrase ",
                                                  { "Ref": "ChefRepoSecret" },
                                                  " --output /var/tmp/chef_repo.tar.gz ",
                                                  "/var/tmp/chef_repo.tar.gz.gpg" ] ] }
              },
              "5_extract_chef_repo" : {
                "command" : "tar zxvf /var/tmp/chef_repo.tar.gz -C /var/chef"
              },
              "6_run_chef" : {
                "command" : "/var/chef/script/configure.sh",
                "cwd"     : "/var/chef",
                "env"     : { "CHEF_REPO_URL" : { "Ref": "ChefRepoURL" }, 
                              "HOME"          : "/root",
                              "PATH"          : "/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin:/root/bin" }
              }
            }
          },

          "3" : {
            "commands": {
              "1_disable_epel" : {
                "command" : "yum-config-manager --disable epel"
              },
              "2_cleanup_files" : {
                "command" : "rm -rf /var/tmp/chef_repo.tar.gz /var/tmp/chef_repo.tar.gz.gpg"
              }
            }
          }
        }
      },
      "Properties": {
        "KeyName": { "Ref": "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "IamInstanceProfile": { "Ref": "RootInstanceProfile" },
        "InstanceType": { "Ref": "InstanceType" },
        "SecurityGroups": [
          { "Ref": "InstancesSecurityGroup" }
        ],
        "UserData": { "Fn::Base64": { "Fn::Join": ["", [
          "#!/bin/bash\n",
          "yum update -y aws-cfn-bootstrap\n",

          "/opt/aws/bin/cfn-init -s ", { "Ref": "AWS::StackName" },
            " -r InstanceLaunchConfig",
            " --region=", { "Ref": "AWS::Region" },
            " -c bootstrap", "\n",

          "/opt/aws/bin/cfn-signal -e ", { "Fn::FindInMap": [ "BootstrapSettingMap", "abort", { "Ref": "Abort" } ] },
            " '", { "Ref": "InstancesWaitHandle" }, "'\n"
        ]]}}
      }
    },

    "InstancesWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {}
    },

    "InstancesWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": [ "InstanceLaunchConfig", "Instances" ],
      "Properties": {
        "Handle": { "Ref": "InstancesWaitHandle" },
        "Count": "1",
        "Timeout": "900"
      }
    },

    "InstancesSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security Group for the app the instance",
        "SecurityGroupIngress": [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : "0.0.0.0/0"
          }
        ]
      }
    }
  },

  "Outputs": {
    "InstanceAutoScalingGroup": {
      "Value": { "Ref": "Instances" },
      "Description": "App Instances Auto Scaling Group ID"
    }
  }
}
